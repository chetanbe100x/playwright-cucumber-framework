plugins {
    id 'java'
    id 'groovy'
    id 'io.qameta.allure' version '2.11.2'
}

group 'com.framework'
version '1.0-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

ext {
    playwrightVersion = '1.40.0'
    cucumberVersion = '7.15.0'
    extentVersion = '1.14.0'
    log4jVersion = '2.22.0'
    poiVersion = '5.2.5'
    jacksonVersion = '2.16.0'
    allureVersion = '2.24.0'
}

dependencies {
    // Playwright
    implementation "com.microsoft.playwright:playwright:${playwrightVersion}"

    // Cucumber
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "io.cucumber:cucumber-picocontainer:${cucumberVersion}"

    // Extent Reports - using latest version explicitly
    implementation "tech.grasshopper:extentreports-cucumber7-adapter:${extentVersion}"
    implementation "com.aventstack:extentreports:5.1.1"

    // Allure Reports
    implementation "io.qameta.allure:allure-cucumber7-jvm:${allureVersion}"
    implementation "io.qameta.allure:allure-junit4:${allureVersion}"
    implementation "org.aspectj:aspectjweaver:1.9.20.1"

    // Logging
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // Apache POI for Excel
    implementation "org.apache.poi:poi:${poiVersion}"
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"

    // JSON Parsing
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // JUnit
    testImplementation 'junit:junit:4.13.2'
}

// Create report directories
task createReportDirs {
    doLast {
        file("${projectDir}/reports/SparkReport").mkdirs()
        file("${projectDir}/reports/screenshots").mkdirs()
        file("${projectDir}/logs").mkdirs()
        file("${projectDir}/build/cucumber-reports").mkdirs()
        file("${projectDir}/build/allure-results").mkdirs()
        file("${projectDir}/allure-report").mkdirs()
    }
}

// Clean reports directory
task cleanReports(type: Delete) {
    delete fileTree(dir: "${projectDir}/reports/", include: "**/*")
    //delete fileTree(dir: "${projectDir}/reports/screenshots", include: "**/*")
}

// Class for generating the report - embedded directly in the build script
task generateReport {
    // Important: don't make this depend on the test task, as we want it to run even if tests fail
    doLast {
        println "Generating unified test report..."

        // Add a slight delay to ensure all JSON files are fully written
        sleep(2000)

        // Execute GenericReportGenerator with its classpath
        javaexec {
            // Ensure all needed classes are on the classpath
            classpath = sourceSets.main.runtimeClasspath +
                    sourceSets.main.output +
                    sourceSets.test.runtimeClasspath

            // Use the fully qualified class name
            mainClass = 'com.framework.utils.GenericReportGenerator'

            // Handle any exceptions during execution
            ignoreExitValue = true

            // Show standard output for better diagnostics
            standardOutput = System.out
            errorOutput = System.err
        }

        println "Report generation completed!"
        println "Report available at: ${projectDir}/reports/SparkReport/ExtentSpark.html"
    }
}

// Main test task
test {
    dependsOn createReportDirs, cleanReports

    useJUnit()

    // Important: continue with generation even if tests fail
    ignoreFailures = true

    // Run sequentially to avoid JSON file conflicts
    maxParallelForks = 2

    // Configure Cucumber to generate JSON reports
    systemProperty "cucumber.plugin", "pretty, json:build/cucumber-reports/cucumber.json, com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:, io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm"

    // Parallel configuration
    systemProperty "cucumber.execution.parallel.enabled", "true"
    systemProperty "cucumber.execution.parallel.config.strategy", "fixed"
    systemProperty "cucumber.execution.parallel.config.fixed.parallelism", "4"

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    doFirst {
        println "Starting tests at ${new Date()}"
        println "Working directory: ${projectDir}"
        println "Cucumber plugins: ${systemProperties['cucumber.plugin']}"
    }
}

// Main execution tasks
task runTests(dependsOn: test) {
    doLast {
        println "Tests completed, starting report generation..."
    }

    // This must be a finalizedBy, not a dependsOn, so it runs even when tests fail
    finalizedBy generateReport
}

// Default task
defaultTasks 'runTests'

// Show report file location after build completes
gradle.buildFinished {
    println "\nBuild completed.\n"
    println "Extent Report location: ${projectDir}/reports/SparkReport/ExtentSpark.html"
    println "Allure results location: ${projectDir}/build/allure-results"
    println "Run 'viewAllureReport.bat' to see the Allure report\n"
}

// Configure Allure
allure {
    version = allureVersion
}